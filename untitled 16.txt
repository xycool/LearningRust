
fn update(output: &[&str]) {
    let input_strings = output; // &["123", "234", "345"];
    let mut output_strings: Vec<String> = Vec::new(); // 가변 벡터 생성

    for input_str in input_strings {
        let mut output_str = String::new(); // 새로운 문자열 생성

        for c in input_str.chars() {
            if c.is_digit(10) { // 숫자인지 확인
                let digit = c.to_digit(10).unwrap(); // 숫자로 변환
                let next_digit = (digit + 1) % 10; // 1 증가 (9 초과 시 0으로 순환)
                output_str.push(std::char::from_digit(next_digit, 10).unwrap()); // 문자로 변환 후 추가
            } else {
                output_str.push(c); // 숫자가 아니면 그대로 추가
            }
        }
        output_strings.push(output_str); // 결과 문자열을 벡터에 추가
    }

    let output_strings_slice: &[String] = &output_strings; // 슬라이스 참조 생성

    println!("Input: {:?}", input_strings);
    println!("Output: {:?}", output_strings_slice);

    // output_strings_slice를 순회하는 방법
    for s in output_strings_slice {
        println!("{}", s);
    }
}

fn main() {
    let input = &["   ", " * ", "   "];
    let output = &["", "", ""];
    
    let input_size = input.len();
    println!("input_size => {}", input_size);
    
    for x in 0..input_size {
        for y in 0..input_size {
            if "*" == input[x].as_bytes()[y] as char {
                // update output
                // 3 x 3만 확인.
                let (x_start, x_end, y_start, y_end);
                
                if x - 1 < 0 {
                    x_start = 0;
                } else {
                    x_start = x;
                }
                
                if x + 1 > 3 {
                    x_end = 2;
                } else {
                    x_end = y;
                }
                
                if y - 1 < 0 {
                    y_start = 0;
                } else {
                    y_start = y;
                }
                
                if y + 1 > 3 {
                    y_end = 2;
                } else {
                    y_end = y;
                }
                
                
                for xx in x_start..x_end {
                    for yy in y_start..y_end {
                        let c = output[xx].as_bytes[yy] as char;
                        if c.is_digit(10) { // 숫자인지 확인
                            let digit = c.to_digit(10).unwrap(); // 숫자로 변환
                            let next_digit = (digit + 1) % 10; // 1 증가 (9 초과 시 0으로 순환)
                            output_str.push(std::char::from_digit(next_digit, 10).unwrap()); // 문자로 변환 후 추가
                        } else {
                            output_str.push(c); // 숫자가 아니면 그대로 추가
                        }
                    }
                }
                
                
            }
            //print!("{} ", input[x].as_bytes()[y] as char);
        }
        println!("");
    }
    
    // output
    println!("output");
    output.iter().for_each(|o| println!("{o}"));
    
    //println!("{}", input[1].as_bytes()[1] as char);
    
}